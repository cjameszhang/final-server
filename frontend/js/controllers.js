var appControllers=angular.module("appControllers",[]);appControllers.controller("SearchController",["$scope","$http","CourseService","ProfessorService",function($scope,$http,CourseService,ProfessorService){var params={};CourseService.get(params).success(function(data,status){$scope.courses=data.data,$scope.message=data.message,$scope.status=status}).error(function(data,status){}),ProfessorService.get(params).success(function(data,status){$scope.profs=data.data,$scope.message=data.message,$scope.status=status}).error(function(data,status){})}]),appControllers.controller("CourseController",["$scope","$q","$http","$routeParams","CourseService","ProfessorService","ReviewService","CommentService",function($scope,$q,$http,$routeParams,CourseService,ProfessorService,ReviewService,CommentService){function reviewAverage(reviews){if(0==reviews.length)return 0;var average=0;return reviews.forEach(function(review){average+=review.rating}),console.log(reviews),average/reviews.length}function topNProfessors(n,professors){var profAvgRatings={},reviewList=[];professors.forEach(function(profId){reviewList.push(getReviews({where:{professor:profId,course:id}},function(reviews){0==reviews.length?profAvgRatings[profId]=0:profAvgRatings[profId]=reviewAverage(reviews)}))}),$q.all(reviewList).then(function(){var bestProfsList=getSortedKeys(profAvgRatings).splice(0,n),bestProfs=[],nameList=[];bestProfsList.forEach(function(profId){nameList.push(getProfessor(profId,function(professor){bestProfs.push({name:professor.name,rating:profAvgRatings[profId]})}))}),$q.all(nameList).then(function(){$scope.topProfs=bestProfs})})}function getVotes(){for(var i=0;i<$scope.reviews.length;i++)$scope.reviews[i].votes=$scope.reviews[i].upvotes.length-$scope.reviews[i].downvotes.length}function getSortedKeys(obj){var keys=[];for(var key in obj)keys.push(key);return keys.sort(function(a,b){return obj[a]-obj[b]})}function getProfessor(id,callback){return ProfessorService.getById(id).success(function(value){callback(value.data)})}function getReviews(param,callback){return ReviewService.get(param).success(function(value){callback(value.data)})}var id=$routeParams.id;CourseService.getById(id).then(function(res){$scope.course=res.data.data,topNProfessors(3,$scope.course.professors);var reviewParams={where:{course:id}};return ReviewService.get(reviewParams)},function(){console.log("ERROR"),$q.reject()}).then(function(res){$scope.reviews=res.data.data,$scope.ratingAverage=reviewAverage($scope.reviews),getVotes()}),$scope.upvote=function(index){var i=$scope.reviews[index].upvotes.indexOf(currentUser);-1==i?$scope.reviews[index].upvotes.push(currentUser):$scope.reviews[index].upvotes.splice(i,1);var j=$scope.reviews[index].downvotes.indexOf(currentUser);j>-1&&$scope.reviews[index].downvotes.splice(j,1),getVotes()},$scope.downvote=function(index){var i=$scope.reviews[index].downvotes.indexOf(currentUser);-1==i?$scope.reviews[index].downvotes.push(currentUser):$scope.reviews[index].downvotes.splice(i,1);var j=$scope.reviews[index].upvotes.indexOf(currentUser);j>-1&&$scope.reviews[index].upvotes.splice(j,1),getVotes()}}]),appControllers.controller("ProfController",["$scope","$q","$http","$routeParams","CourseService","ProfessorService","ReviewService","CommentService","UserService",function($scope,$q,$http,$routeParams,CourseService,ProfessorService,ReviewService,CommentService,UserService){function loadComments(){console.log("comments"),console.log($scope.reviews);for(var i in $scope.reviews){console.log(i);var reviewId=$scope.reviews[i]._id,params={where:{review:reviewId}};CommentService.get(params).success(function(data){$scope.reviews[i].comment_objs=data.data,console.log($scope.reviews[i].comment_objs);for(var j in $scope.reviews[i].comment_objs)console.log(j),console.log($scope.reviews[i].comment_objs[j]),UserService.getById($scope.reviews[i].comment_objs[j].user).success(function(data){})})}}var id=$routeParams.id,currentUser="554d8c2b2edcce772e01e895";$scope.topCourses=[],ProfessorService.getById(id).then(function(res){$scope.prof=res.data.data,$scope.message=res.data.message,$scope.status=res.data.status;var courseParams={where:{professors:id}};return ProfessorService.get(courseParams)},function(){$q.reject()}).then(function(res){$scope.courses=res.data.data;var reviewParams={where:{professor:id}};return ReviewService.get(reviewParams)},function(){console.log("ERROR"),$q.reject()}).then(function(res){$scope.reviews=res.data.data,$scope.ratingAverage=0;for(var i=0;i<$scope.reviews.length;i++)$scope.ratingAverage+=$scope.reviews[i].rating;$scope.ratingAverage/=$scope.reviews.length;for(i in $scope.prof.classes){var courseId=$scope.prof.classes[i];console.log(courseId);var params={where:{professor:id,course:courseId}},average=0;ReviewService.get(params).then(function(res){for(var reviews=res.data.data,j=0;j<reviews.length;j++)average+=reviews[j].rating;return average/=reviews.length,CourseService.getById(courseId)}).then(function(res){var name=res.data.data.name;console.log(name),$scope.topCourses.push({name:name,rating:average})})}$scope.getVotes(),loadComments()}),$scope.getReviews=function(){var params={where:{professor:id}};ReviewService.get(params).then(function(res){$scope.reviews=res.data.data,$scope.getVotes(),loadComments()})},$scope.getVotes=function(){for(var i=0;i<$scope.reviews.length;i++)$scope.reviews[i].votes=$scope.reviews[i].upvotes.length-$scope.reviews[i].downvotes.length},$scope.updateReview=function(index){ReviewService.updateByObj($scope.reviews[index]).success(function(data){console.log(data.data),$scope.getReviews()})},$scope.upvote=function(index){var i=$scope.reviews[index].upvotes.indexOf(currentUser);-1==i?$scope.reviews[index].upvotes.push(currentUser):$scope.reviews[index].upvotes.splice(i,1);var j=$scope.reviews[index].downvotes.indexOf(currentUser);j>-1&&$scope.reviews[index].downvotes.splice(j,1),$scope.updateReview(index),$scope.getVotes()},$scope.downvote=function(index){var i=$scope.reviews[index].downvotes.indexOf(currentUser);-1==i?$scope.reviews[index].downvotes.push(currentUser):$scope.reviews[index].downvotes.splice(i,1);var j=$scope.reviews[index].upvotes.indexOf(currentUser);j>-1&&$scope.reviews[index].upvotes.splice(j,1),$scope.updateReview(index),$scope.getVotes()},$scope.submitComment=function(reviewId){console.log(reviewId+": "+$scope.newComment),loadComments()},$scope.range=function(n){return new Array(n)}}]),appControllers.controller("ReviewController",["$scope","$location","$http","$routeParams","CourseService","ProfessorService","ReviewService",function($scope,$location,$http,$routeParams,CourseService,ProfessorService,ReviewService){function reviewError(){$scope.displayText="The review you're attempting to edit doesn't exist",$scope.error=!0,$scope.showMessage=!0,$scope.validReview=!1}function loadCourses(){"undefined"!=typeof profId&&ProfessorService.getById(profId).then(function(res){$scope.professor=res.data.data;var courseParams={where:{professors:$scope.professor._id},select:{name:1}};return CourseService.get(courseParams)}).then(function(res){$scope.courses=res.data.data,console.log($scope.courses),$scope.professors=[$scope.professor],$scope.review.professor=profId,$scope.disableProf=!0,console.log($scope.professors)})}function loadProfs(){"undefined"!=typeof courseId&&CourseService.getById(courseId).then(function(res){$scope.course=res.data.data;var profParams={where:{_id:{$in:$scope.course.professors}},select:{name:1}};return ProfessorService.get(profParams)}).then(function(res){$scope.professors=res.data.data,console.log($scope.professors),$scope.courses=[$scope.course],$scope.review.course=courseId,$scope.disableCourse=!0})}function loadCourseProf(){courseId=$scope.review.course,profId=$scope.review.professor,CourseService.getById(courseId).success(function(data){$scope.courses=[data.data],$scope.disableCourse=!0}),ProfessorService.getById(profId).success(function(data){$scope.professors=[data.data],$scope.disableProf=!0})}var profId=$routeParams.profId,courseId=$routeParams.courseId,reviewId=$routeParams.reviewId;$scope.disableCourse=!1,$scope.disableProf=!1,$scope.mode="Add",$scope.displayText="",$scope.showMessage=!1,$scope.error=!1,$scope.validReview=!0,$scope.review={user:"554d8c2b2edcce772e01e895",course:"undefined"!=typeof courseId?courseId:"",rating:"",professor:"undefined"!=typeof profId?profId:"",title:"",body:""},"undefined"!=typeof reviewId&&($scope.mode="Edit",ReviewService.getById(reviewId).success(function(data,status){$scope.review=data.data,loadCourseProf(),$scope.review.professor!=profId&&reviewError()}).error(function(data,status){reviewError()})),"undefined"!=typeof profId&&loadCourses(),"undefined"!=typeof courseId&&loadProfs(),$scope.submit=function(){if($scope.reviewForm.course.$invalid||$scope.reviewForm.rating.$invalid||$scope.reviewForm.title.$invalid||$scope.reviewForm.desc.$invalid)$scope.error=!0;else{var review=$scope.review;console.log("here"),$scope.error=!1,console.log(review);var query;query="Add"==$scope.mode?ReviewService.post(review):ReviewService.updateByObj(review),query.success(function(data,status){$scope.showMessage=!0,$scope.displayText=data.message,$scope.error=!1}).error(function(data,status){$scope.showMessage=!0,$scope.displayText=data.message,$scope.error=!0})}}}]),appControllers.controller("UserReviewController",["$scope","$q","$http","$routeParams","CourseService","UserService","ReviewService",function($scope,$q,$http,$routeParams,CourseService,UserService,ReviewService){function load(){var params={where:{user:userId}};ReviewService.get(params).success(function(data){$scope.reviews=data.data;var courses=[];$scope.reviews.forEach(function(obj,i){courses.push(getCourse(obj.course,function(value){$scope.reviews[i].courseName=value.name}))}),$q.all(courses)})}function getCourse(courseId,callback){return CourseService.getById(courseId).success(function(value){return callback(value.data)})}var userId=$routeParams.userId;$scope["delete"]=function(reviewId){ReviewService.deleteById(reviewId).success(function(){load()})},load()}]);